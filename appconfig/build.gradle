apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven-publish'
apply plugin: 'io.gitlab.arturbosch.detekt'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        // see also kotlinOptions.allWarningsAsErrors below
        warningsAsErrors true
        abortOnError true
        ignore "ContentDescription", "Overdraw"
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation "com.jakewharton.timber:timber:4.5.1"
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

group 'ch.pete.appconfig'
version '1.0.0'

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/appconfig-release.aar")
            groupId this.group
            artifactId 'appconfig'
            version this.version

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones),
                // adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.allWarningsAsErrors = true
}

detekt {
    // fail build on any finding
    failFast = true
    // preconfigure defaults
    buildUponDefaultConfig = true
    config = files("$projectDir/../config/detekt.yml")

    reports {
        // observe findings in your browser with structure and code snippets
        html.enabled = true
        // checkstyle like format mainly for integrations like Jenkins
        xml.enabled = false
        // similar to the console output, contains issue signature to manually edit baseline files
        txt.enabled = false
    }
}
